{"version":3,"sources":["components/AI.jsx","App.jsx","index.jsx"],"names":["SelectButton","styled","button","TargetBox","div","x","y","width","height","classType","score","toFixed","ObjectDetector","props","fileInputRef","useRef","imageRef","useState","imgData","setImgData","predictions","setPredictions","isLoading","setLoading","isEmptyPredictions","length","normalizePredictions","imgSize","map","prediction","bbox","oldX","oldY","oldWidth","oldHeight","imgWidth","current","imgHeight","detectObjectsOnImage","imageElement","a","cocoSsd","model","detect","normalizedPredictions","console","log","readImage","file","Promise","rs","rj","fileReader","FileReader","onload","result","onerror","error","readAsDataURL","onSelectImage","e","target","files","document","createElement","src","className","style","display","justifyContent","marginTop","marginLeft","href","data-icon","data-size","data-show-count","aria-label","alt","ref","idx","class","type","onChange","onClick","click","AppContainer","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c9c44e0e.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport \"../App.css\";\nimport \"@tensorflow/tfjs-backend-cpu\";\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\nimport GitHubButton from \"react-github-btn\";\n\nconst SelectButton = styled.button`\n  padding: 7px 10px;\n  border: 2px solid transparent;\n  background-color: #fff;\n  color: #0a0f22;\n  font-size: 16px;\n  font-weight: 500;\n  outline: none;\n  margin-top: 2em;\n  cursor: pointer;\n  transition: all 260ms ease-in-out;\n\n  &:hover {\n    background-color: transparent;\n    border: 2px solid #fff;\n    color: #fff;\n  }\n`;\n\nconst TargetBox = styled.div`\n  position: absolute;\n\n  left: ${({ x }) => x + \"px\"};\n  top: ${({ y }) => y + \"px\"};\n  width: ${({ width }) => width + \"px\"};\n  height: ${({ height }) => height + \"px\"};\n\n  border: 4px solid #1ac71a;\n  background-color: transparent;\n  z-index: 20;\n\n  &::before {\n    content: \"${({ classType, score }) => `${classType} ${score.toFixed(1)}%`}\";\n    color: #1ac71a;\n    font-weight: 500;\n    font-size: 17px;\n    position: absolute;\n    top: -1.5em;\n    left: -5px;\n  }\n`;\n\nexport default function ObjectDetector(props) {\n  const fileInputRef = useRef();\n  const imageRef = useRef();\n  const [imgData, setImgData] = useState(null);\n  const [predictions, setPredictions] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n\n  const isEmptyPredictions = !predictions || predictions.length === 0;\n\n  const openFilePicker = () => {\n    if (fileInputRef.current) fileInputRef.current.click();\n  };\n\n  const normalizePredictions = (predictions, imgSize) => {\n    if (!predictions || !imgSize || !imageRef) return predictions || [];\n    return predictions.map((prediction) => {\n      const { bbox } = prediction;\n      const oldX = bbox[0];\n      const oldY = bbox[1];\n      const oldWidth = bbox[2];\n      const oldHeight = bbox[3];\n\n      const imgWidth = imageRef.current.width;\n      const imgHeight = imageRef.current.height;\n\n      const x = (oldX * imgWidth) / imgSize.width;\n      const y = (oldY * imgHeight) / imgSize.height;\n      const width = (oldWidth * imgWidth) / imgSize.width;\n      const height = (oldHeight * imgHeight) / imgSize.height;\n\n      return { ...prediction, bbox: [x, y, width, height] };\n    });\n  };\n\n  const detectObjectsOnImage = async (imageElement, imgSize) => {\n    const model = await cocoSsd.load({});\n    const predictions = await model.detect(imageElement, 6);\n    const normalizedPredictions = normalizePredictions(predictions, imgSize);\n    setPredictions(normalizedPredictions);\n    console.log(\"Predictions: \", predictions);\n  };\n\n  const readImage = (file) => {\n    return new Promise((rs, rj) => {\n      const fileReader = new FileReader();\n      fileReader.onload = () => rs(fileReader.result);\n      fileReader.onerror = () => rj(fileReader.error);\n      fileReader.readAsDataURL(file);\n    });\n  };\n\n  const onSelectImage = async (e) => {\n    setPredictions([]);\n    setLoading(true);\n\n    const file = e.target.files[0];\n    const imgData = await readImage(file);\n    setImgData(imgData);\n\n    const imageElement = document.createElement(\"img\");\n    imageElement.src = imgData;\n\n    imageElement.onload = async () => {\n      const imgSize = {\n        width: imageElement.width,\n        height: imageElement.height,\n      };\n      await detectObjectsOnImage(imageElement, imgSize);\n      setLoading(false);\n    };\n  };\n\n  return (\n    <div className=\"ObjectDetectorContainer\">\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n        }}\n      >\n        <h1>Gitdetect made with Tensorflow Coco Ssd and react</h1>\n        <div style={{\n          marginTop: '32px',\n          marginLeft : '12px'\n        }}>\n          <GitHubButton\n            href=\"https://github.com/GITSALAHE/AI_TENSORFLOW_REACT\"\n            data-icon=\"octicon-star\"\n            data-size=\"large\"\n            data-show-count=\"true\"\n            \n            aria-label=\"Star GITSALAHE/AI_TENSORFLOW_REACT on GitHub\"\n        >\n          Star\n        </GitHubButton>\n        </div>\n       \n      </div>\n\n      <div className=\"DetectorContainer\">\n        {imgData && (\n          <img className=\"TargetImg\" alt=\"ai\" src={imgData} ref={imageRef} />\n        )}\n        {!isEmptyPredictions &&\n          predictions.map((prediction, idx) => (\n            <TargetBox\n              key={idx}\n              x={prediction.bbox[0]}\n              y={prediction.bbox[1]}\n              width={prediction.bbox[2]}\n              height={prediction.bbox[3]}\n              classType={prediction.class}\n              score={prediction.score * 100}\n            />\n          ))}\n      </div>\n      <input\n        className=\"HiddenFileInput\"\n        type=\"file\"\n        ref={fileInputRef}\n        onChange={onSelectImage}\n      />\n      <SelectButton onClick={openFilePicker}>\n        {isLoading ? \"Recognizing...\" : \"Select Image\"}\n      </SelectButton>\n    </div>\n  );\n}\n","import styled from \"styled-components\";\nimport  ObjectDetector from \"./components/AI\";\n\nconst AppContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  background-color: #1c2127;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: #fff;\n`;\n\nfunction App() {\n  return (\n    <AppContainer>\n      <ObjectDetector />\n    </AppContainer>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}